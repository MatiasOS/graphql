{"version":3,"sources":["../../src/data/schema.js"],"names":["makeMergedSchema","logger","log","e","console","fetcherHello","uri","schemaHello","ExceutableSchemaHello","schema","fetcher","fetcherPerson","schemaPerson","ExceutableSchemaPerson","LinkSchema","schemas","resolvers","mergeInfo","Person","hello","fragment","resolve","parent","args","context","info","dir","delegate","what","name"],"mappings":";;;;;;AAAA;;AACA;;AAEA,eAAeA,gBAAf,GAAmC;AACjC,QAAMC,SAAS,EAACC,KAAMC,CAAD,IAAOC,QAAQF,GAAR,CAAYC,CAAZ,CAAb,EAAf;AACA,QAAME,eAAe,oCAAkB,EAACC,KAAK,+BAAN,EAAlB,CAArB;AACA,QAAMC,cAAc,MAAM,oCAAiBF,YAAjB,CAA1B;AACA,QAAMG,wBAAwB,MAAM,8CAA2B;AAC7DC,YAAQF,WADqD;AAE7DG,aAASL,YAFoD;AAG7DJ;AAH6D,GAA3B,CAApC;;AAMA,QAAMU,gBAAgB,oCAAkB,EAACL,KAAK,+BAAN,EAAlB,CAAtB;AACA,QAAMM,eAAe,MAAM,oCAAiBD,aAAjB,CAA3B;AACA,QAAME,yBAAyB,MAAM,8CAA2B;AAC9DJ,YAAQG,YADsD;AAE9DF,aAASC,aAFqD;AAG9DV;AAH8D,GAA3B,CAArC;;AAMA;AACA,QAAMa,aAAc;;;;;GAApB;;AAOA,SAAO,gCAAa;AAClBC,aAAS,CAACP,qBAAD,EAAwBK,sBAAxB,EAAgDC,UAAhD,CADS;AAElBE,eAAWC,cAAc;AACvBC,cAAQ;AACNC,eAAM;AACJC,oBAAU,2CADN;AAEJC,kBAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,IAA/B,EAAqC;AACnCrB,oBAAQsB,GAAR,CAAYJ,MAAZ;AACAlB,oBAAQsB,GAAR,CAAYH,IAAZ;AACAnB,oBAAQsB,GAAR,CAAYF,OAAZ;AACApB,oBAAQsB,GAAR,CAAYD,IAAZ;AACA,mBAAOR,UAAUU,QAAV,CACL,OADK,EAEL,OAFK,EAGL;AACEC,oBAAMN,OAAOO;AADf,aAHK,EAMLL,OANK,EAOLC,IAPK,CAAP;AASD;AAhBG;AADA;AADe,KAAd;AAFO,GAAb,CAAP;AAyBD;;kBAEczB,kB","file":"schema.js","sourcesContent":["import { createApolloFetch } from 'apollo-fetch'\nimport { introspectSchema, makeRemoteExecutableSchema, mergeSchemas } from 'graphql-tools'\n\nasync function makeMergedSchema () {\n  const logger = {log: (e) => console.log(e)}\n  const fetcherHello = createApolloFetch({uri: 'http://127.0.0.1:3001/graphql'})\n  const schemaHello = await introspectSchema(fetcherHello)\n  const ExceutableSchemaHello = await makeRemoteExecutableSchema({\n    schema: schemaHello,\n    fetcher: fetcherHello,\n    logger\n  })\n\n  const fetcherPerson = createApolloFetch({uri: 'http://127.0.0.1:3003/graphql'})\n  const schemaPerson = await introspectSchema(fetcherPerson)\n  const ExceutableSchemaPerson = await makeRemoteExecutableSchema({\n    schema: schemaPerson,\n    fetcher: fetcherPerson,\n    logger\n  })\n\n  // A small string schema extensions to add links between schemas\n  const LinkSchema = `\n    extend type Person {\n    \n      hello: String\n    }\n  `\n\n  return mergeSchemas({\n    schemas: [ExceutableSchemaHello, ExceutableSchemaPerson, LinkSchema],\n    resolvers: mergeInfo => ({\n      Person: {\n        hello:{\n          fragment: 'fragment helloFragment on Person { name }',\n          resolve(parent, args, context, info) {\n            console.dir(parent)\n            console.dir(args)\n            console.dir(context)\n            console.dir(info)\n            return mergeInfo.delegate(\n              'query',\n              'hello',\n              {\n                what: parent.name\n              },\n              context,\n              info,\n            )\n          }\n        }\n      }\n    })\n  })\n}\n\nexport default makeMergedSchema()"]}