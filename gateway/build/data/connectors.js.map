{"version":3,"sources":["../../src/data/connectors.js"],"names":["db","dialect","storage","AuthorModel","define","firstName","type","STRING","lastName","PostModel","title","text","hasMany","belongsTo","seed","sync","force","then","times","create","first_name","last_name","author","createPost","sentences","Author","models","Post","post","mongo","connect","ViewSchema","Schema","postId","Number","views","View","model","update","id","integer","upsert","FortuneCookie","getOne","res","json","fortune","message"],"mappings":"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","file":"connectors.js","sourcesContent":["import Sequelize from 'sequelize'\nimport casual from 'casual'\nimport _ from 'lodash'\nimport Mongoose from 'mongoose'\nimport fetch from 'node-fetch'\n\nconst db = new Sequelize('blog', null, null, {\n  dialect: 'sqlite',\n  storage: './blog.sqlite',\n})\n\nconst AuthorModel = db.define('author', {\n  firstName: {type: Sequelize.STRING},\n  lastName: {type: Sequelize.STRING},\n})\n\nconst PostModel = db.define('post', {\n  title: {type: Sequelize.STRING},\n  text: {type: Sequelize.STRING},\n})\n\nAuthorModel.hasMany(PostModel)\nPostModel.belongsTo(AuthorModel)\n\n// create mock data with a seed, so we always get the same\ncasual.seed(123)\ndb.sync({force: true}).then(() => {\n  _.times(10, () => {\n    return AuthorModel.create({\n      firstName: casual.first_name,\n      lastName: casual.last_name,\n    }).then((author) => {\n      return author.createPost({\n        title: `A post by ${author.firstName}`,\n        text: casual.sentences(3),\n      })\n    })\n  })\n})\n\nconst Author = db.models.author\nconst Post = db.models.post\n\n// somewhere in the middle:\nconst mongo = Mongoose.connect('mongodb://127.0.0.1:27017/views')\n\nconst ViewSchema = Mongoose.Schema({\n  postId: Number,\n  views: Number,\n})\n\nconst View = Mongoose.model('views', ViewSchema)\n\ncasual.seed(123)\ndb.sync({force: true}).then(() => {\n  _.times(10, () => {\n    return AuthorModel.create({\n      firstName: casual.first_name,\n      lastName: casual.last_name,\n    }).then((author) => {\n      return author.createPost({\n        title: `A post by ${author.firstName}`,\n        text: casual.sentences(3),\n      }).then((post) => { // <- the new part starts here\n        // create some View mocks\n        return View.update(\n          {postId: post.id},\n          {views: casual.integer(0, 100)},\n          {upsert: true})\n      })\n    })\n  })\n})\n\nconst FortuneCookie = {\n  getOne() {\n    return fetch('http://fortunecookieapi.herokuapp.com/v1/cookie')\n      .then(res => res.json())\n      .then(res => {\n        return res[0].fortune.message\n      })\n  },\n}\n\n\nexport { Author, Post, View, FortuneCookie }"]}