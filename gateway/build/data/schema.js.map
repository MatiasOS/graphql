{"version":3,"sources":["../../src/data/schema.js"],"names":["makeMergedSchema","console","log","linkHello","uri","fetch","schemaHello","linkPerson","schemaPerson","LinkSchema","executableHello","schema","link","executablePerson","schemas","resolvers","mergeInfo","Person","hello","resolve","parent","args","context","info","delegate","what"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA,eAAeA,gBAAf,GAAmC;;AAGjCC,UAAQC,GAAR,CAAY,GAAZ;AACA,QAAMC,YAAY,oCAAe,EAACC,KAAK,+BAAN,EAAuCC,0BAAvC,EAAf,CAAlB;AACA,QAAMC,cAAc,MAAM,oCAAiBH,SAAjB,CAA1B;AACAF,UAAQC,GAAR,CAAY,GAAZ;AACA,QAAMK,aAAa,6BAAa,EAACH,KAAK,+BAAN,EAAuCC,0BAAvC,EAAb,CAAnB;AACA,QAAMG,eAAe,MAAM,oCAAiBD,UAAjB,CAA3B;AACAN,UAAQC,GAAR,CAAY,GAAZ;;AAEA,QAAMO,aAAc;;;;KAApB;;AAMA,QAAMC,kBAAkB,8CAA2B;AACjDC,YAAQL,WADyC;AAEjDM,UAAMT;AAF2C,GAA3B,CAAxB;;AAKA,QAAMU,mBAAmB,8CAA2B;AAClDF,YAAQH,YAD0C;AAElDI,UAAML;AAF4C,GAA3B,CAAzB;;AAKA,SAAO,gCAAa;AAClBO,aAAS,CAACJ,eAAD,EAAkBG,gBAAlB,EAAoCJ,UAApC,CADS;AAElBM,eAAWC,cAAc;AACvBC,cAAQ;AACNC,eAAO;AACLC,kBAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,IAA/B,EAAqC;AACnC,mBAAOP,UAAUQ,QAAV,CACL,OADK,EAEL,OAFK,EAGL;AACEC,oBAAMJ,KAAKI;AADb,aAHK,EAMLH,OANK,EAOLC,IAPK,CAAP;AASD;AAXI;AADD;AADe,KAAd;AAFO,GAAb,CAAP;AAoBD;;AAEM,MAAMZ,0BAASX,kBAAf","file":"schema.js","sourcesContent":["import { HttpLink, createHttpLink } from 'apollo-link-http'\nimport fetch from 'node-fetch'\nimport { introspectSchema, makeRemoteExecutableSchema, mergeSchemas } from 'graphql-tools'\n\nasync function makeMergedSchema () {\n\n\n  console.log('.')\n  const linkHello = createHttpLink({uri: 'http://localhost:3003/graphql', fetch})\n  const schemaHello = await introspectSchema(linkHello)\n  console.log('.')\n  const linkPerson = new HttpLink({uri: 'http://localhost:3000/graphql', fetch})\n  const schemaPerson = await introspectSchema(linkPerson)\n  console.log('.')\n\n  const LinkSchema = `\n    extend type Person {\n      hello: String\n    }\n    `\n\n  const executableHello = makeRemoteExecutableSchema({\n    schema: schemaHello,\n    link: linkHello,\n  })\n\n  const executablePerson = makeRemoteExecutableSchema({\n    schema: schemaPerson,\n    link: linkPerson,\n  })\n\n  return mergeSchemas({\n    schemas: [executableHello, executablePerson, LinkSchema],\n    resolvers: mergeInfo => ({\n      Person: {\n        hello: {\n          resolve(parent, args, context, info) {\n            return mergeInfo.delegate(\n              'query',\n              'hello',\n              {\n                what: args.what,\n              },\n              context,\n              info,\n            )\n          }\n        }\n      }\n    })\n  })\n}\n\nexport const schema = makeMergedSchema()"]}